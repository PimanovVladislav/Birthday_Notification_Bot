import re

from aiogram import Bot, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.dispatcher.router import Router
from aiogram.filters import Command, CommandStart  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫–æ–º–∞–Ω–¥

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤–∞—à–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
from database import add_user, add_birthday, get_birthdays_by_user, delete_birthday

# –°–æ–∑–¥–∞–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä
router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class BirthdayForm(StatesGroup):
    full_name = State()
    birthdate = State()
    contact_info = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º CommandStart
@router.message(CommandStart())
async def start_command(message: types.Message, state: FSMContext):
    user = message.from_user
    add_user(user.id, user.username, user.first_name, user.last_name)
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add_birthday - –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è\n"
        "/list_birthdays - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏\n"
        "/delete_birthday - —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å"
    )

# –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
@router.message(Command(commands=["add_birthday"]))
async def add_birthday_start(message: types.Message, state: FSMContext):
    await state.set_state(BirthdayForm.full_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞:")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –§–ò–û
@router.message(BirthdayForm.full_name)
async def process_full_name(message: types.Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await state.set_state(BirthdayForm.birthdate)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
@router.message(BirthdayForm.birthdate)
async def process_birthdate(message: types.Message, state: FSMContext):
    if not re.match(r'\d{4}-\d{2}-\d{2}', message.text):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
        return

    await state.update_data(birthdate=message.text)
    await state.set_state(BirthdayForm.contact_info)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (—Ç–µ–ª–µ—Ñ–æ–Ω, Telegram –∏ —Ç.–¥.):")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
@router.message(BirthdayForm.contact_info)
async def process_contact_info(message: types.Message, state: FSMContext):
    data = await state.get_data()
    full_name = data['full_name']
    birthdate = data['birthdate']
    contact_info = message.text

    user_id = message.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    add_birthday(user_id, full_name, birthdate, contact_info)

    await message.answer(f"–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è {full_name} –¥–æ–±–∞–≤–ª–µ–Ω!")
    await state.clear()

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã /list_birthdays
@router.message(Command(commands=["list_birthdays"]))
async def list_birthdays(message: types.Message):
    user_id = message.from_user.id
    birthdays = get_birthdays_by_user(user_id)

    if not birthdays:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π.")
        return

    response = "–í–∞—à–∏ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è:\n\n"
    for bd in birthdays:
        response += (
            f"üîπ {bd['full_name']}\n"
            f"–î–∞—Ç–∞: {bd['birthdate']}\n"
            f"–ö–æ–Ω—Ç–∞–∫—Ç: {bd['contact_info']}\n"
            f"ID: {bd['id']}\n\n"
        )

    await message.answer(response)

# –£–¥–∞–ª–µ–Ω–∏–µ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–∞—á–∞–ª–æ) —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã /delete_birthday
class DeleteBirthday(StatesGroup):
    birthday_id = State()

@router.message(Command(commands=["delete_birthday"]))
async def delete_birthday_start(message: types.Message, state: FSMContext):
    await state.set_state(DeleteBirthday.birthday_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")

@router.message(DeleteBirthday.birthday_id)
async def process_birthday_id(message: types.Message, state: FSMContext):
    try:
        birthday_id = int(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (ID).")
        return

    user_id = message.from_user.id
    birthdays = get_birthdays_by_user(user_id)
    ids = [bd['id'] for bd in birthdays]

    if birthday_id not in ids:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–∏ —Å —Ç–∞–∫–∏–º ID.")
        await state.clear()
        return

    delete_birthday(birthday_id)
    await message.answer("–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞!")
    await state.clear()